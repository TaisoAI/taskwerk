/**
 * Init Command
 * 
 * @description Initialize a new Taskwerk project
 * @module taskwerk/cli/commands/system/init
 */

import { Command } from 'commander';
import { existsSync, mkdirSync, writeFileSync } from 'fs';
import { join } from 'path';
import { DEFAULTS } from '../../../core/constants.js';
import chalk from 'chalk';

/**
 * Creates the init command
 * @returns {Command} The init command
 */
export function makeInitCommand() {
  return new Command('init')
    .description('Initialize Taskwerk in the current directory')
    .option('-f, --force', 'Force initialization even if already exists')
    .action(async (options) => {
      await handleInit(options);
    });
}

/**
 * Handles the init command
 * @param {Object} options - Command options
 * @param {boolean} options.force - Force initialization
 */
async function handleInit(options) {
  const taskwerkDir = DEFAULTS.TASKWERK_DIR;
  
  // Check if already initialized
  if (existsSync(taskwerkDir) && !options.force) {
    console.error(chalk.red('Error: Taskwerk is already initialized in this directory'));
    console.error(chalk.yellow('Use --force to reinitialize'));
    process.exit(1);
  }

  try {
    // Create .taskwerk directory
    if (!existsSync(taskwerkDir)) {
      mkdirSync(taskwerkDir, { recursive: true });
    }

    // Create default rules file
    const rulesPath = join(taskwerkDir, DEFAULTS.RULES_FILENAME);
    if (!existsSync(rulesPath) || options.force) {
      writeFileSync(rulesPath, getDefaultRules(), 'utf-8');
    }

    // Success message
    console.log(chalk.green('âœ“ Taskwerk initialized successfully!'));
    console.log(chalk.gray(`Created ${taskwerkDir}/ directory`));
    console.log(chalk.gray(`Created ${rulesPath}`));
    console.log('');
    console.log('Next steps:');
    console.log(chalk.cyan('  twrk task add "My first task"'));
    console.log(chalk.cyan('  twrk task list'));
    
  } catch (error) {
    console.error(chalk.red('Error initializing Taskwerk:'), error.message);
    process.exit(1);
  }
}

/**
 * Gets the default rules content
 * @returns {string} Default rules markdown
 */
function getDefaultRules() {
  return `# Taskwerk Project Rules

## Before Starting a Task
- [ ] Task has clear acceptance criteria
- [ ] Dependencies are available  
- [ ] Create feature branch

## During Development
- [ ] Keep task notes updated
- [ ] Commit frequently with clear messages
- [ ] Include task ID in commits

## Before Completing
- [ ] All tests pass
- [ ] Code is documented
- [ ] No linting errors

## Git Workflow
- [ ] Branch names: feature/TASK-XXX
- [ ] Commit format: "TASK-XXX: description"
- [ ] Delete branch after merge

Generated by Taskwerk v3
`;
}